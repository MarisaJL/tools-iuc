<macros>
    <token name="@TOOL_VERSION@">5.0</token>
    <token name="@VERSION_SUFFIX@">0</token>
    <token name="@PROFILE@">23.0</token>
    <xml name="requirements">
        <requirements>
            <requirement type="package" version="@TOOL_VERSION@">r-seurat</requirement>
            <requirement type="package" version="1.2.1">fit-sne</requirement>
            <requirement type="package" version="3.58.1">bioconductor-limma</requirement>
            <requirement type="package" version="1.28.0">bioconductor-mast</requirement>
            <requirement type="package" version="1.42.0">bioconductor-deseq2</requirement>
            <requirement type="package" version="2.1.3">r-svglite</requirement>
            <requirement type="package" version="0.10.2">leidenalg</requirement>
            <requirement type="package" version="0.5.5">umap-learn</requirement>
        </requirements>
    </xml>
    <xml name="citations">
        <citations>
            <citation type="doi">10.1038/s41587-023-01767-y</citation>
        </citations>
    </xml>
    <xml name="sanitize_query" token_validinitial="string.printable">
        <sanitizer>
            <valid initial="@VALIDINITIAL@">
                <remove value="&apos;" />
            </valid>
       </sanitizer>
    </xml>
    <xml name="sanitize_vectors" token_validinitial="string.digits">
        <sanitizer>
            <valid initial="@VALIDINITIAL@">
                <add value=","/>
            </valid>
        </sanitizer>
    </xml>
    <xml name="version_command">
        <version_command><![CDATA[
echo $(R --version | grep version | grep -v GNU)", Seurat version" $(R --vanilla --slave -e "library(Seurat); cat(sessionInfo()\$otherPkgs\$DESeq2\$Version)" 2> /dev/null | grep -v -i "WARNING: ")
        ]]></version_command>
    </xml>

    <token name="@CMD_imports@"><![CDATA[
library(Seurat)
    ]]>
    </token>
    <xml name="input_rds">
        <param name="seurat_rds" type="data" format="rds" label="RDS input file with the Seurat object"/>
    </xml>
    <token name="@CMD_read_inputs@"><![CDATA[
seurat_obj = readRDS('seurat.rds')
        ]]>
    </token>
    <token name="@CMD@"><![CDATA[
cp '$seurat_rds' 'seurat.rds' &&
cat '$script_file' > '$hidden_output' &&
Rscript '$script_file' >> '$hidden_output' &&
ls . >> '$hidden_output'
    ]]>
    </token>
    <xml name="inputs_common_advanced">
        <section name="advanced_common" title="Advanced Options" expanded="false">
            <param name="show_log" type="boolean" checked="false" label="Output Log?" />
        </section>
    </xml>
    <xml name="outputs_common_advanced">
        <data name="hidden_output" format="txt" label="Log file" >
            <filter>advanced_common['show_log']</filter>
        </data>
    </xml>
    <xml name="seurat_outputs">
        <data name="rds_out" format="rds" from_work_dir="seurat.rds" label="${tool.name} (${method.method}) on ${on_string}: RDS"/>
        <expand macro="outputs_common_advanced"/>
    </xml>
    <token name="@CMD_rds_write_outputs@"><![CDATA[
saveRDS(seurat_obj, 'seurat.rds')
        ]]>
    </token>
    <xml name="markers_out">
        <data name="markers_tabular" format="csv" from_work_dir="markers_out.csv" label="${tool.name} on ${on_string}: Markers list">
            <filter>method['method'] == 'FindAllMarkers' or method['method'] == 'FindMarkers'</filter>
        </data>
    </xml>
    <token name="@CMD_write_markers_tab@"><![CDATA[
write.csv(seurat_obj, 'markers_out.csv')
    ]]>
    </token>
    <xml name="plot_out">
        <data name="plot_out_png" format="png" from_work_dir="plot.png" label="Seurat ${tool.name} on ${on_string}: png plot">
            <filter>
                plot_format == 'png'
            </filter>
        </data>
        <data name="plot_out_pdf" format="pdf" from_work_dir="plot.pdf" label="Seurat ${tool.name} on ${on_string}: pdf plot">
            <filter>
                plot_format == 'pdf'
            </filter>
        </data>
        <data name="plot_out_svg" format="svg" from_work_dir="plot.svg" label="Seurat ${tool.name} on ${on_string}: svg plot">
            <filter>
                plot_format == 'svg'
            </filter>
        </data>
        <data name="plot_out_jpeg" format="jpeg" from_work_dir="plot.jpeg" label="Seurat ${tool.name} on ${on_string}: jpeg plot">
            <filter>
                plot_format == 'jpeg'
            </filter>
        </data>
        <data name="plot_out_tex" format="tex" from_work_dir="plot.tex" label="Seurat ${tool.name} on ${on_string}: tex plot">
            <filter>
                plot_format == 'tex'
            </filter>
        </data>
        <data name="plot_out_tiff" format="tiff" from_work_dir="plot.tiff" label="Seurat ${tool.name} on ${on_string}: tiff plot">
            <filter>
                plot_format == 'tiff'
            </filter>
        </data>
        <data name="plot_out_eps" format="eps" from_work_dir="plot.eps" label="Seurat ${tool.name} on ${on_string}: eps plot">
            <filter>
                plot_format == 'eps'
            </filter>
        </data>
    </xml>
    <xml name="param_eps" tokens="eps_value">
        <param argument="eps" type="float" value="@EPS_VALUE@"  label="Small number to avoid numerical errors"/>
    </xml>
    <xml name="markers_inputs">
        <param name="logfc_threshold" type="float" value="0.1" label="Minimum log-fold difference to test"/>
                <param name="slot" type="text" value="data" label="Slot to pull data from (data, counts, scale.data) (set to counts for negbinom, poisson or DESeq2)"/>
                <conditional name="test_use">
                    <param name="test_use" type="select" label="Select test to run">
                        <option value="wilcox" selected="true">wilcox</option>
                        <option value="wilcox_limma">wilcox_limma</option>
                        <option value="bimod">bimod</option>
                        <option value="roc">roc</option>
                        <option value="t">t</option>
                        <option value="negbinom">negbinom</option>
                        <option value="poisson">poisson</option>
                        <option value="LR">LR</option>
                        <option value="MAST">MAST</option>
                        <option value="DESeq2">DESeq2</option>
                    </param>
                    <when value="wilcox"></when>
                    <when value="wilcox_limma"></when>
                    <when value="bimod"></when>
                    <when value="roc">
                        <param name="return_thresh" type="float" value="0.01" label="Only return markers with a p-value below or power above this threshold (if the test is ROC)"/>
                    </when>
                    <when value="t"></when>
                    <when value="negbinom">
                        <param name="latent_vars" type="text" optional="true" value="" label="Select variables to test when using LR, negbinom, poisson, or MAST methods"/>
                        <param name="min_cells_feature" type="integer" value="3" label="Minimum number of cells expressing the feature in at least one cluster (for poisson and negative bionomial tests)"/>
                    </when>
                    <when value="poisson">
                        <param name="latent_vars" type="text" optional="true" value="" label="Select variables to test when using LR, negbinom, poisson, or MAST methods"/>
                        <param name="min_cells_feature" type="integer" value="3" label="Minimum number of cells expressing the feature in at least one cluster (for poisson and negative bionomial tests)"/>
                    </when>
                    <when value="LR">
                        <param name="latent_vars" type="text" optional="true" value="" label="Select variables to test when using LR, negbinom, poisson, or MAST methods"/>
                    </when>
                    <when value="MAST">
                        <param name="latent_vars" type="text" optional="true" value="" label="Select variables to test when using LR, negbinom, poisson, or MAST methods"/>
                    </when>
                    <when value="DESeq2"></when>
                </conditional>
                <param name="min_pct" type="float" value="0.01" label="Minimum percentage of cells genes must be present in to be tested"/>
                <param name="min_diff_pct" type="float" optional="true" value="" label="Minimum difference in percentage of expression between groups for genes to be tested, defaults to -Inf"/>
                <param name="only_pos" type="boolean" truevalue="TRUE" falsevalue="FALSE" checked="false" label="Only return positive markers"/>
                <param name="max_cells_per_ident" type="integer" optional="true" value="" label="Downsample each identity class to a max number of cells, defaults to Inf (no downsampling)"/>
                <param name="random_seed" type="integer" optional = "true" value="1" label="Set a random seed for downsampling"/>
                <param name="min_cells_group" type="integer" value="3" label="Minimum number of cells in one group"/>
                <param name="densify" type="boolean" truevalue="TRUE" falsevalue="FALSE" checked="false" label="Convert to dense matrix before running DE test"/>
    </xml>
    <xml name="plot_parameters">
        <param name="plot_format" type="select" label="Format of plot to produce">
        <option value="png">png</option>
        <option value="pdf">pdf</option>
        <option value="svg">svg</option>
        <option value="jpeg">jpeg</option>
        <option value="tex">tex</option>
        <option value="tiff">tiff</option>
        <option value="eps">eps</option>
        </param>
    </xml>
</macros>
