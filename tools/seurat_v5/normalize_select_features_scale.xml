<tool id="seurat_normalize_select_features_scale_regress" name="Seurat Normalize, Filter and scale" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="@PROFILE@">
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <expand macro="version_command"/>
    <command detect_errors="exit_code"><![CDATA[
@CMD@
    ]]></command>
    <configfiles>
        <configfile name="script_file"><![CDATA[
@CMD_imports@
@CMD_read_inputs@

#if $method.method == 'FilterCells'
    #if $method.min_nFeature_RNA != ''
seurat_obj<-subset(
    seurat_obj,
    subset = nFeature_RNA > $min_nFeature_RNA
)
    #end if
    #if $method.max_nFeature_RNA != ''
seurat_obj<-subset(
    seurat_obj,
    subset = nFeature_RNA < $max_nFeature_RNA
)
    #end if
    #if $method.min_nCount_RNA != ''
seurat_obj<-subset(
    seurat_obj,
    subset = nCount_RNA > $min_nCount_RNA
)
    #end if
    #if $method.max_nCount_RNA != ''
seurat_obj<-subset(
    seurat_obj,
    subset = nCount_RNA < $max_nCount_RNA
)
    #end if
    #if $method.max_percent_mt != ''
seurat_obj<-subset(
    seurat_obj,
    subset = percent.mt < $max_percent_mt
)
    #end if

#else if $method.method == 'NormalizeData'
seurat_obj<-NormalizeData(
    seurat_obj,
    normalization.method = '$method.normalization_method',
    scale.factor = $method.scale_factor,
    margin = $method.margin,
    #if $method.block_size
    block.size = $method.block_size
    #end if
)

#else if $method.method == 'FindVariableFeatures'
seurat_obj<-FindVariableFeatures(
    seurat_obj,
    selection.method = '$method.selection_method.selection_method',
    #if $method.selection_method.selection_method == 'vst'
    loess.span = $method.selection_method.loess_span,
    clip.max = '$method.selection_method.clip_max',
    #end if
    #if $method.selection_method.selection_method != 'mean.var.plot'
        #if $method.selection_method.nfeatures != ''
        nfeatures = $method.selection_method.nfeatures,
        #end if
    #end if
    #if $method.selection_method.selection_method != 'dispersion'
    mean.function = '$method.mean_function',
    dispersion.function = '$method.dispersion_function',
    #end if
    num.bin = $method.num_bin,
    binning.method = '$method.binning_method'
)

#else if $method.method == 'ScaleData'

all.genes<-rownames(seurat_obj)

seurat_obj<-ScaleData(
    seurat_obj,
    #if $method.features != ''
        #if $method.features == 'all.genes'
        features = all.genes,
        #else
        #set $features = (x.strip() for x in str($method.features).split(','))
        features = c($features),
        #end if
    #end if
    #if $method.assay != ''
    assay = '$method.assay',
    #end if
    #if $method.regress.regress == 'true'
    vars.to.regress = '$method.regress.vars_to_regress',
    latent.data = '$method.regress.latent_data',
    model.use = '$method.regress.model_use',
    use.umi = $method.regress.use_umi,
    #end if
    do.scale = $method.do_scale,
    do.center = $method.do_center,
    #if $method.do_scale == 'true'
    scale.max = $method.scale_max,
    block.size = $method.block_size,
    min.cells.to.block = $method.min_cells_to_block
    #end if
)
#end if

@CMD_rds_write_outputs@

]]></configfile>
    </configfiles>
    <inputs>
        <expand macro="input_rds"/>
        <conditional name="method">
            <param name="method" type="select" label="Method used">
                <option value="FilterCells">Filter cells by QC metrics</option>
                <option value="NormalizeData">Normalize with 'NormalizeData'</option>
                <option value="FindVariableFeatures">Identify highly variable genes with 'FindVariableFeatures'</option>
                <option value="ScaleData">Scale and regress with 'ScaleData'</option>
            </param>
            <when value="FilterCells">
                <param name="min_nFeature_RNA" type="integer" optional="true" value="" label="Minimum nFeature_RNA"/>
                <param name="max_nFeature_RNA" type="integer" optional="true" value="" label="Maximum nFeature_RNA"/>
                <param name="min_nCount_RNA" type="integer" optional="true" value="" label="Minimum nCount_RNA"/>
                <param name="max_nCount_RNA" type="integer" optional="true" value="" label="Maximum nCount_RNA"/>
                <param name="max_percent_mt" type="float" optional="true" value="" label="Maximum percent.mt"/>
            </when>
            <when value="NormalizeData">
                <param name="normalization_method" type="select" label="Method for normalization">
                    <option value="LogNormalize" selected="true">LogNormalize</option>
                    <option value="CLR">CLR</option>
                    <option value="RC">RC</option>
                </param>
                <param name="margin" type="integer" optional="true" value="1" label="If performing CLR normalization, normalize across features (1) or cells (2)"/>
                <param name="scale_factor" type="integer" value="10000" label="Set scale factor for normalization"/>
                <param name="block_size" type="integer" optional="true" value="" label="Number of cells to run in each block"/>
            </when>
            <when value="FindVariableFeatures">
                <conditional name="selection_method">
                    <param name="selection_method" type="select" label="Method to select variable features">
                        <option value="vst" selected="true">vst</option>
                        <option value="mean.var.plot">mean.var.plot</option>
                        <option value="dispersion">dispersion</option>
                    </param>
                    <when value="vst">
                        <param name="loess_span" type="float" value="0.3" label="Loess span parameter for fitting variance-mean relationship (vst method)"/>
                        <param name="clip_max" type="text" value="auto" label="Maximum value after standardisation (vst method) (default is auto, sets to square root of number of cells)"/>
                        <param name="nfeatures" type="integer" optional="true" value="" label="Number of features to select as top variable features"/>
                        <param name="mean_function" type="text" value="FastExpMean" label="Function to compute average expression (default is to take mean of detected non-zero values)"/>
                        <param name="dispersion_function" type="text" value="FastLogVMR" label="Function to compute dispersion (default is to take standard deviation of all values)"/>
                    </when>
                    <when value="mean.var.plot">
                        <param name="mean_function" type="text" value="FastExpMean" label="Function to compute average expression (default is to take mean of detected non-zero values)"/>
                        <param name="dispersion_function" type="text" value="FastLogVMR" label="Function to compute dispersion (default is to take standard deviation of all values)"/>
                    </when>
                    <when value="dispersion">
                        <param name="nfeatures" type="integer" optional="true" value="" label="Number of features to select as top variable features"/>
                    </when>
                </conditional>
                <param name="num_bin" type="integer" value="20" label="Number of bins to use"/>
                <param name="binning_method" type="select" label="Method to compute bins">
                    <option value="equal_width" selected="true">equal width</option>
                    <option value="equal_frequency">equal frequency</option>
                </param>
            </when>
            <when value="ScaleData">
                <param argument="assay" type="text" value="" optional="true" label="Name of Assay to scale or regress"/>
                <conditional name="regress">
                    <param name="regress" type="select" label="Regress out a variable or latent data">
                        <option value="true">Yes</option>
                        <option value="false" selected="true">No</option>
                    </param>
                    <when value="true">
                        <param name="vars_to_regress" type="text" optional="true" value="" label="Regress out a variable (e.g. percent.mt)"/>
                        <param name="latent_data" type="text" optional="true" value="" label="Regress out cells x latent data"/>
                        <param name="model_use" type="select" optional="true" label="Model to use for regression">
                            <option value="linear">linear</option>
                            <option value="poisson">poisson</option>
                            <option value="negbinom">negbinom</option>
                        </param>
                        <param name="use_umi" type="boolean" truevalue="TRUE" falsevalue="FALSE" checked="false" label="Regress on UMI count data, recommended if regression model is not linear"/>
                    </when>
                    <when value="false">
                    </when>
                </conditional>
                <param name="features" type="text" optional="true" value="" label="Features to scale, default is variable features, use all.genes to scale all"/>
                <param name="split_by" type="text" optional="true" value="" label="Scale cells in groups by a variable, vector or factor"/>
                <param name="do_scale" type="boolean" truevalue="TRUE" falsevalue="FALSE" checked="true" label="Scale the data"/>
                <param name="do_center" type="boolean" truevalue="TRUE" falsevalue="FALSE" checked="true" label="Center the data"/>
                <param name="scale_max" type="float" value="10" label="Set max value for scaled data"/>
                <param name="block_size" type="integer" value="1000" label="Number of features to scale in a single computation"/>
                <param name="min_cells_to_block" type="integer" value="3000" label="Use blocks for scaling if object has more than this number of cells"/>
            </when>
        </conditional>
        <expand macro="inputs_common_advanced"/>
    </inputs>
    <outputs>
        <expand macro="seurat_outputs"/>
    </outputs>
    <tests>
        <test expect_num_outputs="2">
            <!-- test1: FilterCells -->
            <param name="seurat_rds" location="https://zenodo.org/records/11484502/files/unfiltered.rds"/>
            <conditional name="method">
                <param name="method" value="FilterCells"/>
                <param name="min_nCount_RNA" value="1"/>
                <param name="max_nCount_RNA" value="20000000"/>
            </conditional>
            <section name="advanced_common">
                <param name="show_log" value="true"/>
            </section>
            <output name="hidden_output">
                <assert_contents>
                    <has_text_matching expression="subset"/>
                </assert_contents>
            </output>
            <output name="rds_out" ftype="rds">
                <assert_contents>
                    <has_size size="358124"/>
                </assert_contents>
            </output>
        </test>
        <test expect_num_outputs="2">
            <!-- test2: NormalizeData -->
            <param name="seurat_rds" location="https://zenodo.org/records/11484502/files/filtered.rds"/>
            <conditional name="method">
                <param name="method" value="NormalizeData"/>
                <param name="normalization_method" value="LogNormalize"/>
                <param name="scale_factor" value="10000"/>
                <param name="margin" value="1"/>
            </conditional>
            <section name="advanced_common">
                <param name="show_log" value="true"/>
            </section>
            <output name="hidden_output">
                <assert_contents>
                    <has_text_matching expression="NormalizeData"/>
                </assert_contents>
            </output>
            <output name="rds_out" ftype="rds">
                <assert_contents>
                    <has_size size="1167711"/>
                </assert_contents>
            </output>
        </test>
        <test expect_num_outputs="2">
            <!-- test3: FindVariableFeatures -->
            <param name="seurat_rds" location="https://zenodo.org/records/11484502/files/normalized.rds"/>
            <conditional name="method">
                <param name="method" value="FindVariableFeatures"/>
                <conditional name="selection_method">
                    <param name="selection_method" value="vst"/>
                    <param name="loess_span" value="0.3"/>
                    <param name="clip_max" value="auto"/>
                    <param name="nfeatures" value="100"/>
                </conditional>
                <param name="mean_function" value="FastExpMean"/>
                <param name="dispersion_function" value="FastLogVMR"/>
                <param name="num_bin" value="20"/>
                <param name="binning_method" value="equal_width"/>
            </conditional>
            <section name="advanced_common">
                <param name="show_log" value="true"/>
            </section>
            <output name="hidden_output">
                <assert_contents>
                    <has_text_matching expression="FindVariableFeatures"/>
                </assert_contents>
            </output>
            <output name="rds_out" ftype="rds">
                <assert_contents>
                    <has_size size="1196718"/>
                </assert_contents>
            </output>
        </test>
        <test expect_num_outputs="2">
            <!-- test4: ScaleData -->
            <param name="seurat_rds" location="https://zenodo.org/records/11484502/files/variablefeatures.rds"/>
            <conditional name="method">
                <param name="method" value="ScaleData"/>
                <conditional name="regress">
                    <param name="regress" value="YesRegress"/>
                    <param name="vars_to_regress" value="nUMI"/>
                    <param name="model_use" value="linear"/>
                    <param name="use_umi" value="FALSE"/>
                </conditional>
                <param name="features" value="all.genes"/>
                <param name="do_scale" value="TRUE"/>
                <param name="do_center" value="TRUE"/>
                <param name="scale_max" value="10"/>
                <param name="block_size" value="1000"/>
                <param name="min_cells_to_block" value="3000"/>
            </conditional>
            <section name="advanced_common">
                <param name="show_log" value="true"/>
            </section>
            <output name="hidden_output">
                <assert_contents>
                    <has_text_matching expression="ScaleData"/>
                </assert_contents>
            </output>
            <output name="rds_out" ftype="rds">
                <assert_contents>
                    <has_size size="232641"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
Seurat
======

Seurat is an R package designed for QC, analysis, and exploration of single-cell RNA-seq data. 

Seurat aims to enable users to identify and interpret sources of heterogeneity from single-cell transcriptomic measurements, and to integrate diverse types of single-cell data.

NormalizeData
=============

Normalize the count data present in a given assay.

Methods:

“LogNormalize”: Feature counts for each cell are divided by the total counts for that cell and multiplied by the scale.factor. This is then natural-log transformed using log1p

“CLR”: Applies a centered log ratio transformation

“RC”: Relative counts. Feature counts for each cell are divided by the total counts for that cell and multiplied by the scale.factor. No log-transformation is applied. For counts per million (CPM) set scale.factor = 1e6


More details on the `seurat documentation
<https://satijalab.org/seurat/reference/normalizedata>`__

FindVariableFeatures
====================

Identify features that are outliers on a 'mean variability plot'.

Methods:

“vst”: First, fits a line to the relationship of log(variance) and log(mean) using local polynomial regression (loess). Then standardizes the feature values using the observed mean and expected variance (given by the fitted line). Feature variance is then calculated on the standardized values after clipping to a maximum (see clip.max parameter).

“mean.var.plot” (mvp): First, uses a function to calculate average expression (mean.function) and dispersion (dispersion.function) for each feature. Next, divides features into num.bin (deafult 20) bins based on their average expression, and calculates z-scores for dispersion within each bin. The purpose of this is to identify variable features while controlling for the strong relationship between variability and average expression

“dispersion” (disp): selects the genes with the highest dispersion values

More details on the `seurat documentation
<https://satijalab.org/seurat/reference/findvariablefeatures>`__

Scale and regress the data with ScaleData
=========================================

Scale and center features in the dataset. 

If variables are provided in vars.to.regress, they are individually regressed against each feature, and the resulting residuals are then scaled and centered.

More details on the `seurat documentation
<https://satijalab.org/seurat/reference/scaledata>`__

    ]]></help>
    <expand macro="citations"/>
</tool>